{"version":3,"sources":["types/Comment.ts","components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","api/api.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["CommentField","PostsList","posts","selectedPost","setSelectedPost","handlePostOpen","useCallback","post","id","className","map","isSelected","title","type","cn","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","notErrors","name","email","emptyFields","NewCommentForm","setIsError","setComments","postId","useState","isLoading","setIsLoading","errors","setErrors","fields","setFields","onFieldChange","key","value","prev","trimStart","onFieldClear","onSubmit","e","comment","preventDefault","catch","finally","htmlFor","placeholder","onChange","Name","target","Email","Body","PostDetails","comments","isCommentFormOpen","setIsCommentFormOpen","isError","noErrorAndLoading","commentsMessage","length","useEffect","handleDeleteComment","commentId","filter","com","href","UserSelector","users","selectedUser","setSelectedUser","onUserSelect","isVisibleUserList","setIsVisibleUserList","role","user","handleUserSelect","onBlur","App","setUsers","setPosts","isPostsLoading","setIsPostsLoading","noPostsMessage","userId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7789aeaa.chunk.js","sourcesContent":["export interface Comment {\n  id: number;\n  postId: number;\n  name: string;\n  email: string;\n  body: string;\n}\n\nexport type CommentData = Pick<Comment, 'name' | 'email' | 'body'>;\n\nexport enum CommentField {\n  Name = 'name',\n  Email = 'email',\n  Body = 'body',\n}\n","import React, { useCallback } from 'react';\nimport cn from 'classnames';\nimport { Post } from '../types/Post';\n\ninterface Props {\n  posts: Post[],\n  selectedPost: Post | null,\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | null>>,\n}\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n}) => {\n  const handlePostOpen = useCallback((post: Post) => {\n    if (selectedPost?.id === post.id) {\n      setSelectedPost(null);\n\n      return;\n    }\n\n    setSelectedPost(post);\n  }, [selectedPost, setSelectedPost]);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => {\n            const isSelected = selectedPost?.id !== post.id;\n\n            return (\n              <tr\n                data-cy=\"Post\"\n                key={post.id}\n              >\n                <td data-cy=\"PostId\">\n                  {post.id}\n                </td>\n\n                <td data-cy=\"PostTitle\">\n                  {post.title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={cn('button is-link', {\n                      'is-light': isSelected,\n                    })}\n                    onClick={() => handlePostOpen(post)}\n                  >\n                    {isSelected ? 'Open' : 'Close'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useCallback, useState } from 'react';\nimport cn from 'classnames';\nimport { Comment, CommentData, CommentField } from '../types/Comment';\nimport * as service from '../api/api';\n\ninterface Props {\n  postId: number,\n  setIsError: React.Dispatch<React.SetStateAction<boolean>>,\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n}\n\nconst notErrors = {\n  name: false,\n  email: false,\n  body: false,\n};\n\nconst emptyFields = {\n  name: '',\n  email: '',\n  body: '',\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  setIsError,\n  setComments,\n  postId,\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [errors, setErrors] = useState(notErrors);\n  const [fields, setFields] = useState(emptyFields);\n\n  const onFieldChange = useCallback((\n    key: keyof CommentData,\n    value: string,\n  ) => {\n    setFields((prev) => ({ ...prev, [key]: value.trimStart() }));\n    setErrors((prev) => ({ ...prev, [key]: false }));\n  }, []);\n\n  const onFieldClear = useCallback(() => {\n    setFields(emptyFields);\n    setErrors(notErrors);\n  }, []);\n\n  const addComment = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setErrors(notErrors);\n\n    if (!fields.name || !fields.email || !fields.body) {\n      setErrors({\n        name: !fields.name,\n        email: !fields.email,\n        body: !fields.body,\n      });\n\n      return;\n    }\n\n    setIsLoading(true);\n\n    service.createComment({ ...fields, postId })\n      .then((comment) => {\n        setComments((prev) => [...prev, comment]);\n        setFields({ ...fields, body: '' });\n      })\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={addComment}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={fields.name}\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', {\n              'is-danger': errors.name,\n            })}\n            onChange={e => onFieldChange(CommentField.Name, e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errors.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            value={fields.email}\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', {\n              'is-danger': errors.email,\n            })}\n            onChange={e => onFieldChange(CommentField.Email, e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errors.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            value={fields.body}\n            placeholder=\"Type comment here\"\n            className={cn('textarea', {\n              'is-danger': errors.body,\n            })}\n            onChange={e => onFieldChange(CommentField.Body, e.target.value)}\n          />\n        </div>\n\n        {errors.body && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={onFieldClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const createComment = (comment: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', comment);\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport * as service from '../api/api';\nimport { Comment } from '../types/Comment';\n\ninterface Props {\n  selectedPost: Post,\n}\n\nexport const PostDetails: React.FC<Props> = ({ selectedPost }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isCommentFormOpen, setIsCommentFormOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const noErrorAndLoading = !isLoading && !isError;\n  const commentsMessage = !!comments.length;\n\n  useEffect(() => {\n    setIsError(false);\n    setIsLoading(true);\n    setIsCommentFormOpen(false);\n\n    service.getComments(selectedPost.id)\n      .then(setComments)\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, [selectedPost.id, setComments]);\n\n  const handleDeleteComment = (comment: Comment) => {\n    setComments((prev) => prev.filter(com => com.id !== comment.id));\n\n    service.deleteComment(comment.id)\n      .catch(() => {\n        setComments(comments);\n        setIsError(true);\n      });\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost.id}: ${selectedPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {isError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!commentsMessage && noErrorAndLoading && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {commentsMessage && noErrorAndLoading && (\n            <p className=\"title is-4\">Comments:</p>\n          )}\n\n          {!isError && (\n            comments.map(comment => (\n              <article\n                key={comment.id}\n                className=\"message is-small\"\n                data-cy=\"Comment\"\n              >\n                <div className=\"message-header\">\n                  <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                    {comment.name}\n                  </a>\n                  <button\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => handleDeleteComment(comment)}\n                  >\n                    delete button\n                  </button>\n                </div>\n                <div className=\"message-body\" data-cy=\"CommentBody\">\n                  {comment.body}\n                </div>\n              </article>\n            ))\n          )}\n\n          {!isCommentFormOpen && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsCommentFormOpen(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isCommentFormOpen && !isError && (\n          <NewCommentForm\n            setIsError={setIsError}\n            setComments={setComments}\n            postId={selectedPost.id}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\n\ninterface Props {\n  users: User[],\n  selectedUser: User | null,\n  setSelectedUser: React.Dispatch<React.SetStateAction<User | null>>,\n  onUserSelect: (user: User) => void,\n}\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser,\n  onUserSelect,\n}) => {\n  const [isVisibleUserList, setIsVisibleUserList] = useState(false);\n\n  const handleUserSelect = (user: User) => {\n    setSelectedUser(user);\n    setIsVisibleUserList(false);\n    onUserSelect(user);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsVisibleUserList(!isVisibleUserList)}\n        >\n          <span>{selectedUser ? selectedUser.name : 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isVisibleUserList && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                key={user.id}\n                href={`#user-${user.id}`}\n                className={cn('dropdown-item', {\n                  'is-active': user.id === selectedUser?.id,\n                })}\n                onClick={() => handleUserSelect(user)}\n                onBlur={() => setIsVisibleUserList(false)}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport cn from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport * as service from './api/api';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const [isPostsLoading, setIsPostsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const noPostsMessage = !isPostsLoading\n    && !isError\n    && !posts.length\n    && selectedUser;\n\n  const onUserSelect = (user: User) => {\n    setIsError(false);\n    setIsPostsLoading(true);\n    setSelectedPost(null);\n    setPosts([]);\n\n    service.getPosts(user.id)\n      .then(setPosts)\n      .catch(() => setIsError(true))\n      .finally(() => setIsPostsLoading(false));\n  };\n\n  useEffect(() => {\n    service.getUsers()\n      .then(setUsers)\n      .catch(() => setIsError(true));\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                  onUserSelect={onUserSelect}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isPostsLoading && <Loader />}\n\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {noPostsMessage && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {!!posts.length && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={cn(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails selectedPost={selectedPost} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}