{"version":3,"sources":["utils/fetchClient.ts","types/Comment.ts","AppContext.tsx","api/api.ts","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","CommentField","client","AppContext","React","createContext","users","posts","setPosts","isUserError","setIsUserError","selectedUser","setSelectedUser","selectedPost","setSelectedPost","AppProvider","children","useState","setUsers","value","useMemo","useEffect","catch","Provider","PostsList","useContext","handlePostOpen","useCallback","post","id","className","map","isSelected","title","type","cn","onClick","Loader","notErrors","name","email","emptyFields","NewCommentForm","setIsCommentsError","setComments","postId","isLoading","setIsLoading","errors","setErrors","fields","setFields","onFieldChange","key","prev","trimStart","onFieldClear","onSubmit","e","comment","preventDefault","finally","htmlFor","placeholder","onChange","Name","target","Email","Body","PostDetails","comments","isCommentsError","isCommentFormOpen","setIsCommentFormOpen","isComments","length","handleDeleteComment","commentId","filter","com","href","UserSelector","onUserSelect","isVisibleUserList","setIsVisibleUserList","role","user","handleUserSelect","onBlur","App","noPostsMessage","userId","ReactDOM","render","document","getElementById"],"mappings":"iRAAMA,EAAW,oCAGjB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,WAAWD,EAASF,MAOxB,SAASI,EACPC,GAGa,IAFbC,EAEY,uDAFY,MACxBC,EACY,uDADA,KAENC,EAAuB,CAAEF,UAW/B,OATIC,IAEFC,EAAQC,KAAOC,KAAKC,UAAUJ,GAC9BC,EAAQI,QAAU,CAChB,eAAgB,oCAKbb,EAAK,KACTc,MAAK,kBAAMC,MAAMhB,EAAWO,EAAKG,MACjCK,MAAK,SAAAE,GAAQ,OAAIA,EAASC,UAGxB,ICvBKC,EDuBCC,EACN,SAAIb,GAAJ,OAAoBD,EAAWC,IADzBa,EAEL,SAAIb,EAAaE,GAAjB,OAA+BH,EAAWC,EAAK,OAAQE,IAFlDW,EAIH,SAACb,GAAD,OAAiBD,EAAQC,EAAK,W,OE9B3Bc,EAAaC,IAAMC,cAAuB,CACrDC,MAAO,GACPC,MAAO,GACPC,SAAU,aACVC,aAAa,EACbC,eAAgB,aAChBC,aAAc,KACdC,gBAAiB,aACjBC,aAAc,KACdC,gBAAiB,eAONC,EAA+B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC7C,EAA0BC,mBAAiB,IAA3C,mBAAOX,EAAP,KAAcY,EAAd,KACA,EAA0BD,mBAAiB,IAA3C,mBAAOV,EAAP,KAAcC,EAAd,KACA,EAAsCS,oBAAS,GAA/C,mBAAOR,EAAP,KAAoBC,EAApB,KACA,EAAwCO,mBAAsB,MAA9D,mBAAON,EAAP,KAAqBC,EAArB,KACA,EAAwCK,mBAAsB,MAA9D,mBAAOJ,EAAP,KAAqBC,EAArB,KAEMK,EAAQC,mBAAQ,iBAAO,CAC3Bd,QACAC,QACAC,WACAC,cACAC,iBACAC,eACAC,kBACAC,eACAC,qBACE,CAACR,EAAOK,EAAcJ,EAAOM,EAAcJ,IAQ/C,OANAY,qBAAU,WCpCHnB,EAAmB,UDsCrBL,KAAKqB,GACLI,OAAM,kBAAMZ,GAAe,QAC7B,IAGD,cAACP,EAAWoB,SAAZ,CAAqBJ,MAAOA,EAA5B,SACGH,KE7CMQ,EAAsB,WACjC,MAIIC,qBAAWtB,GAHbI,EADF,EACEA,MACAM,EAFF,EAEEA,aACAC,EAHF,EAGEA,gBAGIY,EAAiBC,uBAAY,SAACC,IAClB,OAAZf,QAAY,IAAZA,OAAA,EAAAA,EAAcgB,MAAOD,EAAKC,GAM9Bf,EAAgBc,GALdd,EAAgB,QAMjB,CAACD,EAAcC,IAElB,OACE,sBAAK,UAAQ,YAAb,UACE,mBAAGgB,UAAU,QAAb,oBAEA,wBAAOA,UAAU,uDAAjB,UACE,gCACE,qBAAIA,UAAU,4BAAd,UACE,mCACA,uCACA,wCAIJ,gCACGvB,EAAMwB,KAAI,SAAAH,GACT,IAAMI,GAAyB,OAAZnB,QAAY,IAAZA,OAAA,EAAAA,EAAcgB,MAAOD,EAAKC,GAE7C,OACE,qBAAI,UAAQ,OAAZ,UACE,oBAAI,UAAQ,SAAZ,SACGD,EAAKC,KAGR,oBAAI,UAAQ,YAAZ,SACGD,EAAKK,QAGR,oBAAIH,UAAU,8BAAd,SACE,wBACEI,KAAK,SACL,UAAQ,aACRJ,UAAWK,IAAG,iBAAkB,CAC9B,WAAYH,IAEdI,QAAS,kBAAMV,EAAeE,IANhC,SAQGI,EAAa,OAAS,2BCxD9BK,G,MAAS,kBACpB,qBAAKP,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wB,gCJMP7B,K,YAAAA,E,cAAAA,E,aAAAA,M,KKEZ,IAAMqC,EAAY,CAChBC,MAAM,EACNC,OAAO,EACP/C,MAAM,GAGFgD,EAAc,CAClBF,KAAM,GACNC,MAAO,GACP/C,KAAM,IAGKiD,EAAkC,SAAC,GAIzC,IAHLC,EAGI,EAHJA,mBACAC,EAEI,EAFJA,YACAC,EACI,EADJA,OAGA,EAAkC5B,oBAAS,GAA3C,mBAAO6B,EAAP,KAAkBC,EAAlB,KACA,EAA4B9B,mBAASqB,GAArC,mBAAOU,EAAP,KAAeC,EAAf,KACA,EAA4BhC,mBAASwB,GAArC,mBAAOS,EAAP,KAAeC,EAAf,KAQMC,EAAgBzB,uBAAY,SAChC0B,EACAlC,GAEAgC,GAAU,SAACG,GAAD,mBAAC,eAAeA,GAAhB,kBAAuBD,EAAMlC,EAAMoC,iBAC7CN,GAAU,SAACK,GAAD,mBAAC,eAAeA,GAAhB,kBAAuBD,GAAM,SACtC,IAEGG,EAAe7B,uBAAY,WAC/BwB,EAAUV,GACVQ,EAAUX,KACT,IA2BH,OACE,uBACE,UAAQ,iBACRmB,SA5Be,SAACC,GHhCO,IAACC,GGiC1BD,EAAEE,iBACFX,EAAUX,GAELY,EAAOX,MAASW,EAAOV,OAAUU,EAAOzD,OAU7CsD,GAAa,IH9CaY,EGgD1B,2BAA2BT,GAA3B,IAAmCL,WH/C9B3C,EAAqB,YAAayD,IGgDpC9D,MAAK,SAAC8D,GACLf,GAAY,SAACU,GAAD,4BAAcA,GAAd,CAAoBK,OAChCR,EAAU,2BAAKD,GAAN,IAAczD,KAAM,SAE9B6B,OAAM,kBAAMqB,GAAmB,MAC/BkB,SAAQ,kBAAMd,GAAa,OAjB5BE,EAAU,CACRV,MAAOW,EAAOX,KACdC,OAAQU,EAAOV,MACf/C,MAAOyD,EAAOzD,QAkBlB,UAIE,sBAAKqC,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQgC,QAAQ,sBAAjC,yBAIA,sBAAKhC,UAAU,yCAAf,UACE,uBACEI,KAAK,OACLK,KAAK,OACLpB,MAAO+B,EAAOX,KACdV,GAAG,sBACHkC,YAAY,eACZjC,UAAWK,IAAG,QAAS,CACrB,YAAaa,EAAOT,OAGtByB,SAAU,SAAAN,GAAC,OAAIN,EAAcnD,EAAagE,KAAMP,EAAEQ,OAAO/C,UAG3D,sBAAMW,UAAU,wBAAhB,SACE,mBAAGA,UAAU,kBAGdkB,EAAOT,MACN,sBACET,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlBkB,EAAOT,MACN,mBAAGT,UAAU,iBAAiB,UAAQ,eAAtC,iCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,aAA/B,UACE,uBAAOA,UAAU,QAAQgC,QAAQ,uBAAjC,0BAIA,sBAAKhC,UAAU,yCAAf,UACE,uBACEI,KAAK,OACLK,KAAK,QACLpB,MAAO+B,EAAOV,MACdX,GAAG,uBACHkC,YAAY,iBACZjC,UAAWK,IAAG,QAAS,CACrB,YAAaa,EAAOR,QAGtBwB,SAAU,SAAAN,GAAC,OAAIN,EAAcnD,EAAakE,MAAOT,EAAEQ,OAAO/C,UAG5D,sBAAMW,UAAU,wBAAhB,SACE,mBAAGA,UAAU,sBAGdkB,EAAOR,OACN,sBACEV,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlBkB,EAAOR,OACN,mBAAGV,UAAU,iBAAiB,UAAQ,eAAtC,kCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQgC,QAAQ,eAAjC,0BAIA,qBAAKhC,UAAU,UAAf,SACE,0BACED,GAAG,eACHU,KAAK,OACLpB,MAAO+B,EAAOzD,KACdsE,YAAY,oBACZjC,UAAWK,IAAG,WAAY,CACxB,YAAaa,EAAOvD,OAGtBuE,SAAU,SAAAN,GAAC,OAAIN,EAAcnD,EAAamE,KAAMV,EAAEQ,OAAO/C,YAI5D6B,EAAOvD,MACN,mBAAGqC,UAAU,iBAAiB,UAAQ,eAAtC,gCAMJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACEI,KAAK,SACLJ,UAAWK,IAAG,iBAAkB,CAC9B,aAAcW,IAHlB,mBAUF,qBAAKhB,UAAU,UAAf,SAEE,wBACEI,KAAK,QACLJ,UAAU,0BACVM,QAASoB,EAHX,4BC/LGa,EAA+B,SAAC,GAAsB,IAApBxD,EAAmB,EAAnBA,aAE7C,EAAgCI,mBAAoB,IAApD,mBAAOqD,EAAP,KAAiB1B,EAAjB,KACA,EAAkC3B,oBAAS,GAA3C,mBAAO6B,EAAP,KAAkBC,EAAlB,KACA,EAA8C9B,oBAAS,GAAvD,mBAAOsD,EAAP,KAAwB5B,EAAxB,KACA,EAAkD1B,oBAAS,GAA3D,mBAAOuD,EAAP,KAA0BC,EAA1B,KACMC,EAAaJ,EAASK,OAAS,EAErCtD,qBAAU,WJPe,IAACwB,EIQxBF,GAAmB,GACnBI,GAAa,GACb0B,GAAqB,IJVG5B,EIYJhC,EAAagB,GJX5B3B,EAAA,2BAA0C2C,KIY5ChD,KAAK+C,GACLtB,OAAM,kBAAMqB,GAAmB,MAC/BkB,SAAQ,kBAAMd,GAAa,QAC7B,CAAClC,EAAagB,GAAIe,IAErB,IAAMgC,EAAsB,SAACjB,GJdF,IAACkB,EIe1BjC,GAAY,SAACU,GAAD,OAAUA,EAAKwB,QAAO,SAAAC,GAAG,OAAIA,EAAIlD,KAAO8B,EAAQ9B,UJflCgD,EIiBJlB,EAAQ9B,GJhBzB3B,EAAA,oBAA2B2E,KIiB7BvD,OAAM,WACLsB,EAAY0B,GACZ3B,GAAmB,OAIzB,OACE,qBAAKb,UAAU,UAAU,UAAQ,cAAjC,SACE,sBAAKA,UAAU,UAAU,UAAQ,cAAjC,UACE,sBAAKA,UAAU,QAAf,UACE,oBAAI,UAAQ,YAAZ,oBACOjB,EAAagB,GADpB,aAC2BhB,EAAaoB,SAGxC,mBAAG,UAAQ,WAAX,SACGpB,EAAapB,UAIlB,sBAAKqC,UAAU,QAAf,UACGgB,GAAa,cAAC,EAAD,IAEbyB,GACC,qBAAKzC,UAAU,yBAAyB,UAAQ,gBAAhD,mCAKA4C,IAAe5B,IAAcyB,GAC7B,mBAAGzC,UAAU,aAAa,UAAQ,oBAAlC,6BAKD4C,IAAe5B,IAAcyB,GAC5B,mBAAGzC,UAAU,aAAb,wBAGAyC,GACAD,EAASvC,KAAI,SAAA4B,GAAO,OAClB,0BAAS7B,UAAU,mBAAmB,UAAQ,UAA9C,UACE,sBAAKA,UAAU,iBAAf,UACE,mBAAGkD,KAAI,iBAAYrB,EAAQnB,OAAS,UAAQ,gBAA5C,SACGmB,EAAQpB,OAEX,wBACE,UAAQ,gBACRL,KAAK,SACLJ,UAAU,kBACV,aAAW,SACXM,QAAS,kBAAMwC,EAAoBjB,IALrC,8BAUF,qBAAK7B,UAAU,eAAe,UAAQ,cAAtC,SACG6B,EAAQlE,cAMf+E,GACA,wBACE,UAAQ,qBACRtC,KAAK,SACLJ,UAAU,iBACVM,QAAS,kBAAMqC,GAAqB,IAJtC,gCAWHD,IAAsBD,GACrB,cAAC,EAAD,CACE5B,mBAAoBA,EACpBC,YAAaA,EACbC,OAAQhC,EAAagB,WCxGpBoD,EAAgC,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAC9C,EAIIzD,qBAAWtB,GAHbG,EADF,EACEA,MACAK,EAFF,EAEEA,aACAC,EAHF,EAGEA,gBAGF,EAAkDK,oBAAS,GAA3D,mBAAOkE,EAAP,KAA0BC,EAA1B,KAQA,OACE,sBACE,UAAQ,eACRtD,UAAU,qBAFZ,UAIE,qBAAKA,UAAU,mBAAf,SACE,yBACEI,KAAK,SACLJ,UAAU,SACV,gBAAc,OACd,gBAAc,gBACdM,QAAS,kBAAMgD,GAAsBD,IALvC,UAOE,+BAAOxE,EAAeA,EAAa4B,KAAO,kBAE1C,sBAAMT,UAAU,gBAAhB,SACE,mBAAGA,UAAU,oBAAoB,cAAY,gBAKlDqD,GACC,qBAAKrD,UAAU,gBAAgBD,GAAG,gBAAgBwD,KAAK,OAAvD,SACE,qBAAKvD,UAAU,mBAAf,SACGxB,EAAMyB,KAAI,SAAAuD,GAAI,OACb,mBAEEN,KAAI,gBAAWM,EAAKzD,IACpBC,UAAWK,IAAG,gBAAiB,CAC7B,YAAamD,EAAKzD,MAAL,OAAYlB,QAAZ,IAAYA,OAAZ,EAAYA,EAAckB,MAEzCO,QAAS,kBArCE,SAACkD,GACxB1E,EAAgB0E,GAChBF,GAAqB,GACrBF,EAAaI,GAkCcC,CAAiBD,IAChCE,OAAQ,kBAAMJ,GAAqB,IAPrC,SASGE,EAAK/C,MARD+C,EAAKzD,eCpCb4D,EAAgB,WAC3B,MAQIhE,qBAAWtB,GAPbM,EADF,EACEA,YACAC,EAFF,EAEEA,eACAC,EAHF,EAGEA,aACAJ,EAJF,EAIEA,MACAC,EALF,EAKEA,SACAK,EANF,EAMEA,aACAC,EAPF,EAOEA,gBAGF,EAAkCG,oBAAS,GAA3C,mBAAO6B,EAAP,KAAkBC,EAAlB,KAGM2C,EAAiBtE,mBACrB,kBAAQ0B,IAAcrC,IAAgBF,EAAMoE,QAAUhE,IACtD,CAACmC,EAAWrC,EAAaF,EAAMoE,OAAQhE,IAgBzC,OACE,sBAAMmB,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,sBAAKA,UAAU,+BAAf,UAEE,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACEoD,aAtBK,SAACI,GNxBA,IAACK,EMyBrBjF,GAAe,GACfqC,GAAa,GACbjC,EAAgB,ON3BK6E,EM6BJL,EAAKzD,GN5BjB3B,EAAA,wBAAoCyF,KM6BtC9F,KAAKW,GACLc,OAAM,kBAAMZ,GAAe,MAC3BmD,SAAQ,kBAAMd,GAAa,WAkBpB,sBAAKjB,UAAU,QAAQ,UAAQ,cAA/B,WACInB,GACA,mBAAG,UAAQ,iBAAX,8BAKDmC,GAAa,cAAC,EAAD,IAEbrC,GACC,qBACEqB,UAAU,yBACV,UAAQ,oBAFV,mCAQD4D,GACC,qBAAK5D,UAAU,0BAA0B,UAAQ,aAAjD,0BAKDvB,EAAMoE,OAAS,GACd,cAAC,EAAD,YAMR,qBACE,UAAQ,UACR7C,UAAWK,IACT,OACA,YACA,eACA,UACA,CAAE,gBAAiBtB,IAPvB,SAUE,qBAAKiB,UAAU,gCAAf,SACGjB,GACC,cAAC,EAAD,CAAaA,aAAcA,gBCjG3C+E,IAASC,OACP,cAAC,EAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.2ecb775f.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export interface Comment {\n  id: number;\n  postId: number;\n  name: string;\n  email: string;\n  body: string;\n}\n\nexport type CommentData = Pick<Comment, 'name' | 'email' | 'body'>;\n\nexport enum CommentField {\n  Name = 'name',\n  Email = 'email',\n  Body = 'body',\n}\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { User } from './types/User';\nimport { Context } from './types/Context';\nimport * as service from './api/api';\nimport { Post } from './types/Post';\n// import { Comment } from './types/Comment';\n\nexport const AppContext = React.createContext<Context>({\n  users: [],\n  posts: [],\n  setPosts: () => { },\n  isUserError: false,\n  setIsUserError: () => { },\n  selectedUser: null,\n  setSelectedUser: () => { },\n  selectedPost: null,\n  setSelectedPost: () => { },\n});\n\ninterface Props {\n  children: React.ReactNode,\n}\n\nexport const AppProvider: React.FC<Props> = ({ children }) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isUserError, setIsUserError] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const value = useMemo(() => ({\n    users,\n    posts,\n    setPosts,\n    isUserError,\n    setIsUserError,\n    selectedUser,\n    setSelectedUser,\n    selectedPost,\n    setSelectedPost,\n  }), [users, selectedUser, posts, selectedPost, isUserError]);\n\n  useEffect(() => {\n    service.getUsers()\n      .then(setUsers)\n      .catch(() => setIsUserError(true));\n  }, []);\n\n  return (\n    <AppContext.Provider value={value}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const createComment = (comment: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', comment);\n};\n","import React, { useCallback, useContext } from 'react';\nimport cn from 'classnames';\nimport { AppContext } from '../AppContext';\nimport { Post } from '../types/Post';\n\nexport const PostsList: React.FC = () => {\n  const {\n    posts,\n    selectedPost,\n    setSelectedPost,\n  } = useContext(AppContext);\n\n  const handlePostOpen = useCallback((post: Post) => {\n    if (selectedPost?.id === post.id) {\n      setSelectedPost(null);\n\n      return;\n    }\n\n    setSelectedPost(post);\n  }, [selectedPost, setSelectedPost]);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => {\n            const isSelected = selectedPost?.id !== post.id;\n\n            return (\n              <tr data-cy=\"Post\">\n                <td data-cy=\"PostId\">\n                  {post.id}\n                </td>\n\n                <td data-cy=\"PostTitle\">\n                  {post.title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={cn('button is-link', {\n                      'is-light': isSelected,\n                    })}\n                    onClick={() => handlePostOpen(post)}\n                  >\n                    {isSelected ? 'Open' : 'Close'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useCallback, useState } from 'react';\nimport cn from 'classnames';\n// import { AppContext } from '../AppContext';\nimport { Comment, CommentData, CommentField } from '../types/Comment';\nimport * as service from '../api/api';\n\ninterface Props {\n  postId: number,\n  setIsCommentsError: React.Dispatch<React.SetStateAction<boolean>>,\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n}\n\nconst notErrors = {\n  name: false,\n  email: false,\n  body: false,\n};\n\nconst emptyFields = {\n  name: '',\n  email: '',\n  body: '',\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  setIsCommentsError,\n  setComments,\n  postId,\n}) => {\n  // const { setComments } = useContext(AppContext);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errors, setErrors] = useState(notErrors);\n  const [fields, setFields] = useState(emptyFields);\n\n  // const onFieldFocus = useCallback((\n  //   key: keyof CommentData,\n  // ) => {\n  //   setErrors((prev) => ({ ...prev, [key]: false }));\n  // }, []);\n\n  const onFieldChange = useCallback((\n    key: keyof CommentData,\n    value: string,\n  ) => {\n    setFields((prev) => ({ ...prev, [key]: value.trimStart() }));\n    setErrors((prev) => ({ ...prev, [key]: false }));\n  }, []);\n\n  const onFieldClear = useCallback(() => {\n    setFields(emptyFields);\n    setErrors(notErrors);\n  }, []);\n\n  const addComment = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setErrors(notErrors);\n\n    if (!fields.name || !fields.email || !fields.body) {\n      setErrors({\n        name: !fields.name,\n        email: !fields.email,\n        body: !fields.body,\n      });\n\n      return;\n    }\n\n    setIsLoading(true);\n\n    service.createComment({ ...fields, postId })\n      .then((comment) => {\n        setComments((prev) => [...prev, comment]);\n        setFields({ ...fields, body: '' });\n      })\n      .catch(() => setIsCommentsError(true))\n      .finally(() => setIsLoading(false));\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={addComment}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={fields.name}\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', {\n              'is-danger': errors.name,\n            })}\n            // onFocus={() => onFieldFocus(CommentField.Name)}\n            onChange={e => onFieldChange(CommentField.Name, e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errors.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            value={fields.email}\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', {\n              'is-danger': errors.email,\n            })}\n            // onFocus={() => onFieldFocus(CommentField.Email)}\n            onChange={e => onFieldChange(CommentField.Email, e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errors.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            value={fields.body}\n            placeholder=\"Type comment here\"\n            className={cn('textarea', {\n              'is-danger': errors.body,\n            })}\n            // onFocus={() => onFieldFocus(CommentField.Body)}\n            onChange={e => onFieldChange(CommentField.Body, e.target.value)}\n          />\n        </div>\n\n        {errors.body && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={onFieldClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport * as service from '../api/api';\n// import { AppContext } from '../AppContext';\nimport { Comment } from '../types/Comment';\n\ninterface Props {\n  selectedPost: Post,\n}\n\nexport const PostDetails: React.FC<Props> = ({ selectedPost }) => {\n  // const { comments, setComments } = useContext(AppContext);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isCommentsError, setIsCommentsError] = useState(false);\n  const [isCommentFormOpen, setIsCommentFormOpen] = useState(false);\n  const isComments = comments.length > 0;\n\n  useEffect(() => {\n    setIsCommentsError(false);\n    setIsLoading(true);\n    setIsCommentFormOpen(false);\n\n    service.getComments(selectedPost.id)\n      .then(setComments)\n      .catch(() => setIsCommentsError(true))\n      .finally(() => setIsLoading(false));\n  }, [selectedPost.id, setComments]);\n\n  const handleDeleteComment = (comment: Comment) => {\n    setComments((prev) => prev.filter(com => com.id !== comment.id));\n\n    service.deleteComment(comment.id)\n      .catch(() => {\n        setComments(comments);\n        setIsCommentsError(true);\n      });\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost.id}: ${selectedPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {isCommentsError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!isComments && !isLoading && !isCommentsError && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {isComments && !isLoading && !isCommentsError && (\n            <p className=\"title is-4\">Comments:</p>\n          )}\n\n          {!isCommentsError && (\n            comments.map(comment => (\n              <article className=\"message is-small\" data-cy=\"Comment\">\n                <div className=\"message-header\">\n                  <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                    {comment.name}\n                  </a>\n                  <button\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => handleDeleteComment(comment)}\n                  >\n                    delete button\n                  </button>\n                </div>\n                <div className=\"message-body\" data-cy=\"CommentBody\">\n                  {comment.body}\n                </div>\n              </article>\n            ))\n          )}\n\n          {!isCommentFormOpen && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsCommentFormOpen(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isCommentFormOpen && !isCommentsError && (\n          <NewCommentForm\n            setIsCommentsError={setIsCommentsError}\n            setComments={setComments}\n            postId={selectedPost.id}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\nimport { AppContext } from '../AppContext';\n\ninterface Props {\n  onUserSelect: (user: User) => void,\n}\n\nexport const UserSelector: React.FC<Props> = ({ onUserSelect }) => {\n  const {\n    users,\n    selectedUser,\n    setSelectedUser,\n  } = useContext(AppContext);\n\n  const [isVisibleUserList, setIsVisibleUserList] = useState(false);\n\n  const handleUserSelect = (user: User) => {\n    setSelectedUser(user);\n    setIsVisibleUserList(false);\n    onUserSelect(user);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsVisibleUserList(!isVisibleUserList)}\n        >\n          <span>{selectedUser ? selectedUser.name : 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isVisibleUserList && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                key={user.id}\n                href={`#user-${user.id}`}\n                className={cn('dropdown-item', {\n                  'is-active': user.id === selectedUser?.id,\n                })}\n                onClick={() => handleUserSelect(user)}\n                onBlur={() => setIsVisibleUserList(false)}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useContext, useMemo, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport cn from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { AppContext } from './AppContext';\nimport { User } from './types/User';\nimport * as service from './api/api';\n\nexport const App: React.FC = () => {\n  const {\n    isUserError,\n    setIsUserError,\n    selectedUser,\n    posts,\n    setPosts,\n    selectedPost,\n    setSelectedPost,\n  } = useContext(AppContext);\n\n  const [isLoading, setIsLoading] = useState(false);\n  // const [isError, setIsError] = useState(false);\n\n  const noPostsMessage = useMemo(\n    () => (!isLoading && !isUserError && !posts.length && selectedUser),\n    [isLoading, isUserError, posts.length, selectedUser],\n  );\n\n  const onUserSelect = (user: User) => {\n    setIsUserError(false);\n    setIsLoading(true);\n    setSelectedPost(null);\n\n    service.getPosts(user.id)\n      .then(setPosts)\n      .catch(() => setIsUserError(true))\n      .finally(() => setIsLoading(false));\n  };\n\n  // console.log(posts);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n\n              <div className=\"block\">\n                <UserSelector\n                  onUserSelect={onUserSelect}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {isUserError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {noPostsMessage && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {posts.length > 0 && (\n                  <PostsList />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={cn(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails selectedPost={selectedPost} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport { AppProvider } from './AppContext';\n\nReactDOM.render(\n  <AppProvider>\n    <App />\n  </AppProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}